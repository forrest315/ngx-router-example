worker_processes 1;
error_log logs/error.log info;

env NGXR_REDIS_HOST;
env NGXR_REDIS_PORT;
env NGXR_REDIS_PREFIX;
env NGXR_REDIS_DELAY;

events {
    worker_connections 1024;
}

http {
    # use thread_pool
    aio threads;

    # use open(public) DNS server
    resolver 223.5.5.5 223.6.6.6 119.29.29.29 8.8.8.8 8.8.4.4;
    resolver_timeout 1s;

    lua_shared_dict hosts_cache 10M;
    lua_code_cache on;

    init_worker_by_lua '

    local redis_host = os.getenv("NGXR_REDIS_HOST")
    if not redis_host or redis_host == "" then redis_host = "127.0.0.1" end
    local redis_port = os.getenv("NGXR_REDIS_PORT")
    if not redis_port or redis_port == "" then redis_port = 6379 end

    local prefix = os.getenv("NGXR_REDIS_PREFIX")
    if not preifx or prefix == "" then prefix = "ngxr" end

    local delay = os.getenv("NGXR_REDIS_DELAY")
    if not delay or delay == "" then prefix = "60" end

    local delay = tonumber(delay);
    local refresh_redis;

    refresh_redis = function(premature)
    if premature then
    return
    end

    local ok, err = ngx.timer.at(delay, refresh_redis)
    if not ok then
    ngx.log(ngx.ERR, "failed to create the refresh job: ", err)
    return
    end

    ngx.log(ngx.INFO, "redis refresher job is running")
    local hosts_cache = ngx.shared.hosts_cache;

    local redis = require "resty.redis";
    local red = redis:new();
    local ok, err = red:connect(redis_host, redis_port)

    if not ok then
    ngx.log(ngx.ERR, "failed connect to redis server")
    return
    else
    ngx.log(ngx.INFO, "connected to redis server")
    end

    local status = red:get(prefix .. ":conf:status")
    if not status or status ~= "OK" then
    ngx.log(ngx.ERR, "redis server is not ready")
    return
    end

    local uris = red:keys(prefix .. ":ptn:*");
    -- if get keys successful, flush current cache
    if uris then
    -- use below to safe flush instead of just hosts_cache:flush_all();
    local keys = hosts_cache:get_keys(0);
    for i,k in ipairs(keys) do
    local v = hosts_cache:get(k);
    -- set exptime of current items NO ZERO
    hosts_cache:set(k, v, delay);
    end
    end

    for i,uri in ipairs(uris) do
    local host = red:get(uri);
    if host and host ~= ngx.null then
    uri = string.sub(uri,10);
    -- set exptime to 0 to let it never expire.
    local succ, err, forcible = hosts_cache:set(uri, host, 0);
    end
    end
    -- below is not needed
    -- ngx.shared.hosts_cache = hosts_cache;
    end

    -- start an init immediately
    local ok, err = ngx.timer.at(0, refresh_redis)
    if not ok then
    ngx.log(ngx.ERR, "failed to create the refresh job: ", err)
    return
    end
    ';

    # server for the management web site.
    server {
        listen 8081;
        root /usr/local/openresty/nginx/logs;
        location / {
            autoindex on;
            # echo "error";
        }
    }

    # server for the proxy.
    # cache with timer
    server {
        listen 8080;
        location / {

            set $target '';
            set $msg '';

            access_by_lua '
            local uri = ngx.var.uri;
            local hosts_cache = ngx.shared.hosts_cache;
            local host

            if not uri then
            ngx.var.target = "error";
            return
            end

            host = hosts_cache:get(uri);
            if host then
            ngx.var.target = host;
            return
            end

            local uris = {};
            local key = "";

            for s in string.gmatch(uri, "[^/]*/") do
            table.insert(uris,s)
            end

            for i = table.maxn(uris), 1, -1 do
            key = table.concat(uris);
            table.remove(uris);

            host = hosts_cache:get(key)
            if host then break end
            end -- end for
            if not host then host = "127.0.0.1:8081" end
            ngx.var.target = host;
            local succ, err, forcible = hosts_cache:set(uri, host, 0);
            ';

            proxy_pass http://$target;
            # echo $target;
        }
    }
}
